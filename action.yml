name: "EK Shellcheck"
description: "Action for checking scripts with Shellcheck"
author: "ESSENTIALKAOS"

branding:
  icon: 'hash'
  color: 'white'

inputs:
  files:
    description: "List of scripts for checking"
    required: true

  version:
    description: "Version of Shellcheck"
    required: false
    default: "0.8.0"

  severity:
    description: "Minimum severity of errors to consider"
    required: false

  format:
    description: "The output format for the results (checkstyle/diff/gcc/json/json1/quiet/tty)"
    required: false

  shell:
    description: "Script dialect (sh, bash, dash, ksh)"
    required: false

runs:
  using: "composite"
  steps:
    - id: shellcheck-bin-cache
      name: Cache Shellcheck binary
      uses: actions/cache@v3
      with:
        path: ~/.cache/shellcheck
        key: ${{runner.os}}-go-shellcheck-action-v${{inputs.version}}

    - id: shellcheck-install
      name: Install Shellcheck
      if: steps.shellcheck-bin-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "::group::Downloading Shellcheck…"

        mkdir -p ~/.cache
        sc_url="https://github.com/koalaman/shellcheck/releases/download"

        if [[ "$RUNNER_OS" == "Linux" ]] ; then
          wget -O shellcheck.tar.xz "${sc_url}/v${{inputs.version}}/shellcheck-v${{inputs.version}}.linux.x86_64.tar.xz" 2>&1
        elif [[ "$RUNNER_OS" == "macOS" ]] ; then
          wget -O shellcheck.tar.xz "${sc_url}/v${{inputs.version}}/shellcheck-v${{inputs.version}}.darwin.x86_64.tar.xz" 2>&1
        else
          echo "::endgroup::"
          echo "$RUNNER_OS is not supported"
          exit 1
        fi

        echo "::endgroup::"
        echo "::group::Unpacking Shellcheck…"

        tar xfv shellcheck.tar.xz -C "$GITHUB_ACTION_PATH"

        mv "$GITHUB_ACTION_PATH/shellcheck-v${{inputs.version}}/shellcheck" \
           ~/.cache/shellcheck

        echo "::endgroup::"

    - id: shellcheck-set-options
      name: Set Shellcheck options
      shell: bash
      run : |
        declare -a options

        if [[ -n "${{inputs.format}}" ]] ; then
          options+=("--format=${{inputs.format}}")
        fi

        if [[ -n "${{inputs.severity}}" ]] ; then
          options+=("--severity=${{inputs.severity}}")
        fi

        if [[ -n "${{inputs.shell}}" ]] ; then
          options+=("--shell=${{inputs.shell}}")
        fi

        echo "::group::Shellcheck configuration…"
        if [[ ${#options[@]} -eq 0 ]] ; then
          echo "Options: -no-set-"
        else
          echo "Options: ${options[@]}"
        fi
        echo "::endgroup::"

        echo "::set-output name=options::${options[@]}"

    - id: shellcheck-version-print
      name: Print Shellcheck version info
      shell: bash
      run: |
        echo "::group::Print Shellcheck version…"
        ~/.cache/shellcheck --version
        echo "::endgroup::"

    - id: shellcheck-check
      name: Checks scripts with Shellcheck
      shell: bash
      run: |
        echo "Running Shellcheck…"
        bash -c 'shopt -s globstar; ~/.cache/shellcheck ${{steps.shellcheck-set-options.outputs.options}} ${{inputs.files}}' && echo "Everything is OK!"
